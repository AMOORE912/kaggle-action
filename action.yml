name: kaggle Action
author: "TODO:"
description: "TODO:"

inputs:
  username:
    description: "TODO:"
    required: true
  key:
    description: "TODO:"
    required: true

  # id:
  title:
    description: "TODO:"
    required: true
  code_file:
    description: "TODO:"
    required: true
  language:
    description: "TODO:"
    default: python
  kernel_type:
    description: "TODO:"
    default: script
  # is_private:
  enable_gpu:
    description: "TODO:"
    default: enable
  enable_internet:
    description: "TODO:"
    default: enable
  # dataset_sources:
  # competition_sources:
  # kernel_sources:

outputs:
  automatic_releases_tag:
    description: The release tag this action just processed
    value: ""
  upload_url:
    description: The URL for uploading additional assets to the release
    value: ""

runs:
  using: composite
  steps:
    - name: Install kaggle CLI tools
      shell: pwsh
      run: python -m pip install --upgrade kaggle --user

    - name: Setup kaggle.json
      shell: pwsh
      run: |
        # using namespace System;
        # using namespace System.Collections;
        # using namespace System.IO;
        [String]$kaggleInfo = ConvertTo-Json -InputObject @{
          'username' = '${{ inputs.username }}';
          'key' = '${{ inputs.key }}'
        };
        New-Item -Path ([System.IO.Path]::Combine('~', '.kaggle', 'kaggle.json')) -Type File -Value $kaggleInfo -Force | Out-Null;

    - name: Setup test
      shell: pwsh
      run: |
        # using namespace System;
        # using namespace System.IO;

        # location
        [String]$actionPath = '${{ github.action_path }}';
        # Set-Location -Path '${{ github.action_path }}' | Out-Null;

        # kaggle init
        kaggle kernels init -p $actionPath;

        [String]$jsonPath = [System.IO.Path]::Combine($actionPath, 'kernel-metadata.json');
        [Hashtable]$metadata = Get-Content -Path $jsonPath -Raw | ConvertFrom-Json -AsHashtable;
        # $metadata[''] = '$#{{ inputs. }}';
        $metadata['id'] = $metadata[id].Split('/')[0] + '/' + '${{ inputs.title }}';
        $metadata['title'] = '${{ inputs.title }}';
        $metadata['code_file'] = '${{ github.workspace }}' + '${{ inputs.code_file }}';
        $metadata['language'] = '${{ inputs.language }}';
        $metadata['kernel_type'] = '${{ inputs.kernel_type }}';
        $metadata['enable_gpu'] = '${{ inputs.enable_gpu }}';
        $metadata['enable_internet'] = '${{ inputs.enable_internet }}';

        ConvertTo-Json -InputObject $metadata | Set-Content -Path $jsonPath | Out-Null;

        #kaggle push
        kaggle kernels push;

    - name: Check status
      shell: pwsh
      run: |
        # using namespace System;
        # using namespace System.IO;

        Set-Location -Path '${{ github.action_path }}' | Out-Null;
        [String]$kernelName = '${{ inputs.title }}';

        while ($true) {
          [String]$status = (kaggle kernels status $kernelName 2>&1) -join [Environment]::NewLine;

          if ($status -like '*error*') {
            # [String]$fullMessage = (kaggle kernels output $kernelName -p $kernelName 2>&1) -join [Environment]::NewLine;
            kaggle kernels output $kernelName -p $kernelName;
            [String]$fullMessage = (Get-Content -Path ([System.IO.Path]::Combine($kernelName, $kernelName + '.log')) -Raw | ConvertFrom-Json -AsHashtable | ForEach-Object -Process { $_['data'] }) -join '';
            [String]$exceptMessage = 'FAIL: Test(s) failed. Full logs below:' + [Environment]::NewLine
            + '::group::Full log' + [Environment]::NewLine
            + $fullMessage + [Environment]::NewLine
            + '::endgroup::';
            throw [Exception]::new($exceptMessage);
          }
          elseif ($status -like '*cancel*') {
            throw [Exception]::new('FAIL: Test(s) failed. The kaggle kernel has been canceled.');
          }
          elseif ($status -like '*complete*') {
            Write-Host -Object 'SUCCESS: Kaggle Integration Tests!';
            break;
          }
          else {
            Start-Sleep -Seconds 3;
          }
        }

branding:
  icon: activity
  color: green
